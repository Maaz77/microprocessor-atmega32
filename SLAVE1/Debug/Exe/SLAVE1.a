;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2019/07/03
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include <stdio.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;int i = 0;
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 200
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 003E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003F char status,data;
; 0000 0040 //char * str = "";
; 0000 0041 status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0042 data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0043 //i = i+1;
; 0000 0044 //sprintf(str,"%d",i);
; 0000 0045 //lcd_clear();
; 0000 0046 //lcd_putchar(data);
; 0000 0047 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0048    {
; 0000 0049    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 004A #if RX_BUFFER_SIZE == 256
; 0000 004B    // special case for receiver buffer size=256
; 0000 004C    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 004D #else
; 0000 004E    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 004F    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0050       {
; 0000 0051       rx_counter=0;
;PCODE: $00000026 VOL: 0
; 0000 0052       rx_buffer_overflow=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0053       }
; 0000 0054 #endif
; 0000 0055    }
;PCODE: $0000002A VOL: 0
; 0000 0056 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 005D {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 005E char data;
; 0000 005F while (rx_counter==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0060 data=rx_buffer[rx_rd_index++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0061 #if RX_BUFFER_SIZE != 256
; 0000 0062 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0063 #endif
; 0000 0064 #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 0065 --rx_counter;
;PCODE: $00000044 VOL: 0
; 0000 0066 #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 0067 return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0068 }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index=0,tx_rd_index=0;
;#else
;unsigned int tx_wr_index=0,tx_rd_index=0;
;#endif
;
;#if TX_BUFFER_SIZE < 256
;unsigned char tx_counter=0;
;#else
;unsigned int tx_counter=0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 007E {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 007F if (tx_counter)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0080    {
; 0000 0081    --tx_counter;
;PCODE: $0000004F VOL: 0
; 0000 0082    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0083 #if TX_BUFFER_SIZE != 256
; 0000 0084    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0085 #endif
; 0000 0086    }
;PCODE: $0000005A VOL: 0
; 0000 0087 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 008E {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 008F while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $00000061 VOL: 0
;	c -> Y+0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0090 #asm("cli")
;PCODE: $00000068 VOL: 0
	cli
;PCODE: $00000069 VOL: 0
; 0000 0091 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0092    {
; 0000 0093    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0094 #if TX_BUFFER_SIZE != 256
; 0000 0095    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0096 #endif
; 0000 0097    ++tx_counter;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0098    }
; 0000 0099 else
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 009A    UDR=c;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 009B #asm("sei")
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
	sei
;PCODE: $00000083 VOL: 0
; 0000 009C }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Analog Comparator interrupt service routine
;interrupt [ANA_COMP] void ana_comp_isr(void)
; 0000 00A5 {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00A6 // Place your code here
; 0000 00A7 
; 0000 00A8 
; 0000 00A9 }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 00B0 {
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00B1 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000008E VOL: 0
;	adc_input -> Y+0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00B2 // Delay needed for the stabilization of the ADC input voltage
; 0000 00B3 delay_us(10);
;PCODE: $00000092 VOL: 0
; 0000 00B4 // Start the AD conversion
; 0000 00B5 ADCSRA|=(1<<ADSC);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00B6 // Wait for the AD conversion to complete
; 0000 00B7 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00B8 ADCSRA|=(1<<ADIF);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00B9 return ADCW;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00BA }
;PCODE: $000000A0 VOL: 0
;
;void send(char c){
; 0000 00BC void send(char c){
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00BD     while(!UCSRA.5);
;PCODE: $000000A3 VOL: 0
;	c -> Y+0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00BE     putchar(c);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00BF }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;
;/*void send(char c)
;{
;while(!UCSRA.5);
;UCSRB.0=0;
;UDR=c;
;}
;*/
;
;void main(void)
; 0000 00CA {
;PCODE: $000000AF VOL: 0
; 0000 00CB // Declare your local variables here
; 0000 00CC 
; 0000 00CD int temp = 0;
; 0000 00CE int first = 0;
; 0000 00CF int second = 0;
; 0000 00D0 int third = 0;
; 0000 00D1 int forth = 0;
; 0000 00D2 int weight1 =0 ;
; 0000 00D3 int weight2 =0;
; 0000 00D4 char * str = "";
; 0000 00D5 char data;
; 0000 00D6 char  data2;
; 0000 00D7 
; 0000 00D8 // Input/Output Ports initialization
; 0000 00D9 // Port A initialization
; 0000 00DA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00DB DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;	temp -> R16,R17
;	first -> R18,R19
;	second -> R20,R21
;	third -> Y+10
;	forth -> Y+8
;	weight1 -> Y+6
;	weight2 -> Y+4
;	*str -> Y+2
;	data -> Y+1
;	data2 -> Y+0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00DC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00DD PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00DE 
; 0000 00DF // Port B initialization
; 0000 00E0 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00E1 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00E2 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00E3 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00E4 
; 0000 00E5 // Port C initialization
; 0000 00E6 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00E7 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00E8 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00E9 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00EA 
; 0000 00EB // Port D initialization
; 0000 00EC // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00ED DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00EE // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00EF PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00F0 
; 0000 00F1 // Timer/Counter 0 initialization
; 0000 00F2 // Clock source: System Clock
; 0000 00F3 // Clock value: Timer 0 Stopped
; 0000 00F4 // Mode: Normal top=0xFF
; 0000 00F5 // OC0 output: Disconnected
; 0000 00F6 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00F7 TCNT0=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00F8 OCR0=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00F9 
; 0000 00FA // Timer/Counter 1 initialization
; 0000 00FB // Clock source: System Clock
; 0000 00FC // Clock value: Timer1 Stopped
; 0000 00FD // Mode: Normal top=0xFFFF
; 0000 00FE // OC1A output: Disconnected
; 0000 00FF // OC1B output: Disconnected
; 0000 0100 // Noise Canceler: Off
; 0000 0101 // Input Capture on Falling Edge
; 0000 0102 // Timer1 Overflow Interrupt: Off
; 0000 0103 // Input Capture Interrupt: Off
; 0000 0104 // Compare A Match Interrupt: Off
; 0000 0105 // Compare B Match Interrupt: Off
; 0000 0106 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0107 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0108 TCNT1H=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0109 TCNT1L=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 010A ICR1H=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 010B ICR1L=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 010C OCR1AH=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 010D OCR1AL=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 010E OCR1BH=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 010F OCR1BL=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0110 
; 0000 0111 // Timer/Counter 2 initialization
; 0000 0112 // Clock source: System Clock
; 0000 0113 // Clock value: Timer2 Stopped
; 0000 0114 // Mode: Normal top=0xFF
; 0000 0115 // OC2 output: Disconnected
; 0000 0116 ASSR=0<<AS2;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0117 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0118 TCNT2=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0119 OCR2=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 011A 
; 0000 011B // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 011C TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 011D 
; 0000 011E // External Interrupt(s) initialization
; 0000 011F // INT0: Off
; 0000 0120 // INT1: Off
; 0000 0121 // INT2: Off
; 0000 0122 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0123 MCUCSR=(0<<ISC2);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0124 
; 0000 0125 // USART initialization
; 0000 0126 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0127 // USART Receiver: On
; 0000 0128 // USART Transmitter: On
; 0000 0129 // USART Mode: Sync. Slave UCPOL=1
; 0000 012A UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 012B UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 012C UCSRC=(1<<URSEL) | (1<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (1<<UCPOL);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 012D // Analog Comparator initialization
; 0000 012E // Analog Comparator: On
; 0000 012F // The Analog Comparator's positive input is
; 0000 0130 // connected to the AIN0 pin
; 0000 0131 // The Analog Comparator's negative input is
; 0000 0132 // connected to the AIN1 pin
; 0000 0133 // Interrupt on Rising Output Edge
; 0000 0134 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0135 ACSR=(0<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (1<<ACIE) | (0<<ACIC) | (1<<ACIS1) | (1<<ACIS0);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0136 
; 0000 0137 // ADC initialization
; 0000 0138 // ADC Clock frequency: 62.500 kHz
; 0000 0139 // ADC Voltage Reference: AREF pin
; 0000 013A // ADC Auto Trigger Source: ADC Stopped
; 0000 013B ADMUX=ADC_VREF_TYPE;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 013C ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 013D SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 013E 
; 0000 013F // SPI initialization
; 0000 0140 // SPI disabled
; 0000 0141 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0142 
; 0000 0143 // TWI initialization
; 0000 0144 // TWI disabled
; 0000 0145 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0146 
; 0000 0147 // Alphanumeric LCD initialization
; 0000 0148 // Connections are specified in the
; 0000 0149 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 014A // RS - PORTC Bit 0
; 0000 014B // RD - PORTC Bit 1
; 0000 014C // EN - PORTC Bit 2
; 0000 014D // D4 - PORTC Bit 4
; 0000 014E // D5 - PORTC Bit 5
; 0000 014F // D6 - PORTC Bit 6
; 0000 0150 // D7 - PORTC Bit 7
; 0000 0151 // Characters/line: 16
; 0000 0152 lcd_init(16);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0153 
; 0000 0154 // Global enable interrupts
; 0000 0155 #asm("sei")
;PCODE: $00000107 VOL: 0
	sei
;PCODE: $00000108 VOL: 0
; 0000 0156 
; 0000 0157 while (1)
;PCODE: $00000109 VOL: 0
; 0000 0158       {
; 0000 0159       // Place your code here
; 0000 015A 
; 0000 015B 
; 0000 015C 
; 0000 015D 
; 0000 015E       temp = read_adc(0);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 015F       data = temp/4;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0160 
; 0000 0161       weight1 = read_adc(1);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0162       weight2 = read_adc(2);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0163 
; 0000 0164       if (weight1>weight2){
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0165         data2 = 'a';
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0166       }
; 0000 0167       else{
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0168         data2 = 'b';
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0169       }
;PCODE: $00000121 VOL: 0
; 0000 016A       lcd_clear();
;PCODE: $00000122 VOL: 0
; 0000 016B       sprintf(str,"%d",data);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 016C       lcd_puts(str);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 016D       lcd_gotoxy(0,1);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 016E       lcd_putchar(data2);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 016F 
; 0000 0170       putchar(data);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0171       delay_ms(200);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0172       putchar(data2);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0173       delay_ms(200);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0174 
; 0000 0175         // lcd_putchar('s');
; 0000 0176         /* address =  getchar();
; 0000 0177          lcd_putchar(address + '0');
; 0000 0178          if (address == 0x01){
; 0000 0179             lcd_puts("asv");
; 0000 017A             temp = read_adc(1);
; 0000 017B             sprintf(str,"%d",temp);
; 0000 017C             lcd_clear();
; 0000 017D             lcd_puts(str);
; 0000 017E             forth = temp%10;
; 0000 017F             temp = temp/10 ;
; 0000 0180             third = temp%10;
; 0000 0181             temp = temp/10;
; 0000 0182             second = temp%10;
; 0000 0183             temp = temp /10;
; 0000 0184             first = temp%10;
; 0000 0185 
; 0000 0186             putchar (first+'0');
; 0000 0187             delay_ms(100);
; 0000 0188 
; 0000 0189             putchar (second+'0');
; 0000 018A             delay_ms(100);
; 0000 018B 
; 0000 018C             putchar(third+'0');
; 0000 018D             delay_ms(100);
; 0000 018E 
; 0000 018F             putchar(forth+'0');
; 0000 0190             delay_ms(100);
; 0000 0191 
; 0000 0192             weight1 = read_adc(1);
; 0000 0193             weight2 = read_adc(2);
; 0000 0194 
; 0000 0195         if (weight1 > weight2){
; 0000 0196             putchar('x');
; 0000 0197             delay_ms(100);
; 0000 0198             lcd_gotoxy(0,1);
; 0000 0199             lcd_putchar('x');
; 0000 019A         }
; 0000 019B         else{
; 0000 019C             putchar('a');
; 0000 019D             delay_ms(100);
; 0000 019E             lcd_gotoxy(0,1);
; 0000 019F             lcd_putchar('a');
; 0000 01A0         }
; 0000 01A1       }
; 0000 01A2       */
; 0000 01A3 
; 0000 01A4 
; 0000 01A5 
; 0000 01A6 
; 0000 01A7 
; 0000 01A8 
; 0000 01A9 
; 0000 01AA 
; 0000 01AB 
; 0000 01AC 
; 0000 01AD 
; 0000 01AE 
; 0000 01AF       }
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 01B0 }
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0

	.DSEG
_0x1A:
	.BYTE 0x1
